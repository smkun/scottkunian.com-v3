rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is admin
    // Uses Firebase custom claims set via Cloud Functions
    function isAdmin() {
      return request.auth != null &&
             request.auth.token.admin == true;
    }

    // Helper function to validate required fields
    function hasRequiredFields(resource, requiredFields) {
      return requiredFields.toSet().difference(resource.keys().toSet()).size() == 0;
    }

    // Posts collection rules
    match /posts/{postId} {
      // Allow public queries
      allow list: if true;

      // Public read access for published posts
      allow get: if resource.data.published == true;

      // Admin read access for all posts (including drafts)
      allow get: if isAdmin();

      // Admin write access with validation
      allow create: if isAdmin() &&
        hasRequiredFields(request.resource.data, [
          'title', 'slug', 'summary', 'body', 'tags',
          'published', 'featured', 'authorId', 'createdAt', 'updatedAt'
        ]) &&
        request.resource.data.slug is string &&
        request.resource.data.slug.size() > 0 &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.tags is list &&
        request.resource.data.published is bool &&
        request.resource.data.featured is bool;

      allow update: if isAdmin() &&
        hasRequiredFields(request.resource.data, [
          'title', 'slug', 'summary', 'body', 'tags',
          'published', 'featured', 'authorId', 'updatedAt'
        ]);

      allow delete: if isAdmin();
    }

    // Projects collection rules
    match /projects/{projectId} {
      // Allow public queries
      allow list: if true;

      // Public read access for visible projects
      allow get: if resource.data.isVisible == true;

      // Admin read access for all projects
      allow get: if isAdmin();

      // Admin write access with validation
      allow create: if isAdmin() &&
        hasRequiredFields(resource.data, [
          'name', 'description', 'summary', 'technologies',
          'isVisible', 'isPinned', 'source', 'createdAt', 'updatedAt'
        ]) &&
        resource.data.name.size() > 0 &&
        resource.data.technologies is list &&
        resource.data.isVisible is bool &&
        resource.data.isPinned is bool &&
        resource.data.source in ['manual', 'github'];

      allow update: if isAdmin() &&
        hasRequiredFields(request.resource.data, [
          'name', 'description', 'summary', 'technologies',
          'isVisible', 'isPinned', 'source', 'updatedAt'
        ]);

      allow delete: if isAdmin();
    }

    // Notes collection rules
    match /notes/{noteId} {
      // Allow public queries
      allow list: if true;

      // Public read access for public notes
      allow get: if resource.data.isPublic == true;

      // Admin read access for all notes
      allow get: if isAdmin();

      // Admin write access with validation
      allow create: if isAdmin() &&
        hasRequiredFields(request.resource.data, [
          'content', 'tags', 'type', 'isPublic', 'createdAt'
        ]) &&
        request.resource.data.content.size() > 0 &&
        request.resource.data.tags is list &&
        request.resource.data.type in ['quick', 'detailed'] &&
        request.resource.data.isPublic is bool;

      allow update: if isAdmin() &&
        hasRequiredFields(request.resource.data, [
          'content', 'tags', 'type', 'isPublic'
        ]);

      allow delete: if isAdmin();
    }

    // Articles collection rules
    match /articles/{articleId} {
      // Allow public queries
      allow list: if true;

      // Public read access for visible articles
      allow get: if resource.data.isVisible == true;

      // Admin read access for all articles
      allow get: if isAdmin();

      // Admin write access with validation
      allow create: if isAdmin() &&
        hasRequiredFields(request.resource.data, [
          'title', 'url', 'publishedAt', 'isVisible', 'source', 'createdAt'
        ]) &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.url.size() > 0 &&
        request.resource.data.isVisible is bool &&
        request.resource.data.source in ['linkedin', 'manual'];

      allow update: if isAdmin() &&
        hasRequiredFields(request.resource.data, [
          'title', 'url', 'publishedAt', 'isVisible', 'source'
        ]);

      allow delete: if isAdmin();
    }

    // Galleries collection rules
    match /galleries/{galleryId} {
      // Allow public queries (list operation)
      allow list: if true;

      // Individual document read access for visible galleries or admin
      allow get: if resource.data.isVisible == true || isAdmin();

      // Admin write access with validation
      allow create: if isAdmin() &&
        hasRequiredFields(request.resource.data, [
          'name', 'slug', 'folderPath', 'isVisible', 'sortOrder', 'createdAt', 'updatedAt'
        ]) &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.slug.size() > 0 &&
        request.resource.data.folderPath.size() > 0 &&
        request.resource.data.isVisible is bool &&
        request.resource.data.sortOrder is number;

      allow update: if isAdmin() &&
        hasRequiredFields(request.resource.data, [
          'name', 'slug', 'folderPath', 'isVisible', 'sortOrder', 'updatedAt'
        ]);

      allow delete: if isAdmin();
    }

    // Deny all other document access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}